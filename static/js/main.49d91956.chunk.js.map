{"version":3,"sources":["hoc/withAuthRedirect.js","components/Navbar/Navbar.module.css","Redux/Dialogs-reducer.js","components/Users/users.module.css","assets/images/UsersAva.png","assets/images/preloader.svg","api/api.js","components/Navbar/Navbar.jsx","components/News/News.jsx","components/Video/Video.jsx","components/Settings/Settings.jsx","utils/object-helper.js","Redux/Users-reducer.js","components/common/Paginator/Paginator.js","components/Users/User.js","components/Users/Users.js","Redux/users-selectors.js","components/Users/UsersContainer.jsx","components/Header/Header.jsx","Redux/auth-reducer .js","components/Header/HeaderContainer.jsx","components/Login/Login.jsx","Redux/app-reducer.js","Redux/Sidebar-reducer.js","Redux/redux-store.js","hoc/withSuspense.js","App.js","index.js","components/common/FormsControls/FormsControls.js","components/common/Preloader/Preloader.js","components/common/FormsControls/FormsControls.module.css","components/common/Paginator/Paginator.module.css","utils/validators/validators.js","components/Header/Header.module.css","Redux/Profile-reducer.js"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","initialState","dialogs","id","name","messages","message","sendMessageCreator","newMessageBody","type","dialogsReducer","action","body","instance","Axios","withCredentials","baseURL","headers","usersApi","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileApi","getStatus","updateStatus","status","put","authApi","me","login","email","password","rememberMe","logout","Navbar","className","s","nav","item","activeClassName","activeLink","active","News","Video","Settings","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleIsFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","count","filter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","p","cn","selectedPage","pageNumber","key","e","User","user","src","photos","small","userPhoto","disabled","some","Users","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","Preloader","compose","bind","page","totalCount","Header","header","loginBlock","SET_USER_DATA","setAuthUserData","payload","getAuthUserData","authReducer","HeaderContainer","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","required","Input","style","formSummaryError","length","stopSubmit","_error","formData","initialized","appReducer","sidebarReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","sidebar","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","_store_","withSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","AppContainer","withRouter","promise","Promise","all","ReactApp","ReactDOM","document","getElementById","FormControl","input","meta","touched","children","hasError","formControl","Textarea","restProps","child","placeholder","validators","component","text","validate","preloader","value","maxLengthCreator","maxLength","posts","likesCount","profile","addPostCreator","newPostText","setStatus","getUsersProfile","newPost"],"mappings":"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","file":"static/js/main.49d91956.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\n//делаем двойной connect конектим комп.выше\r\nlet mapStateToPropsForRedirect = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n//создаем функцию которая принимает на входе компоненту\r\n//создаем внутри класс (RedirectComponent)\r\n//внутри делаем логику Redirect\r\n//и return - перерисовываем целевую компоненту на входе (Component)-в нее каждый раз придет разная целивая компонент\r\n//в итоге мы создадим отдельный класс (обертку) для каждой целивой компон.\r\n//и будем возвращать свою конт. компоненту для каждой целивой(презентац.) компоненты\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to={\"/login\"} />; //cм. в тетрадь. (!) - это оператор отрицания или NOT\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n//когда пользователь вызывет withAuthRedirect он получает 2 конт. компоненты\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2_Z3p\",\"item\":\"Navbar_item__HxWMI\",\"activeLink\":\"Navbar_activeLink__3AYPt\"};","const SEND_MESSAGE = \"SEND_MESSAGE\";\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    { id: 1, name: \"Michael Palych\" },\r\n    { id: 2, name: \"Kendrick Perkins\" },\r\n    { id: 3, name: \"Enes Kanter\" },\r\n    { id: 4, name: \"Cody Zeller\" },\r\n    { id: 5, name: \"Jared Dudley\" },\r\n  ],\r\n  messages: [\r\n    { id: 1, message: \"Ну как там с деньгами?\" },\r\n    { id: 2, message: \"Как тебе мои разборки с Дюрантом?\" },\r\n    { id: 3, message: \"Волован брать будешь?\" },\r\n    { id: 4, message: \"Как я попал в нба?\" },\r\n    { id: 5, message: \"За Леброна и двор!\" },\r\n  ],\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SEND_MESSAGE:\r\n      let body = action.newMessageBody;\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, { id: 6, message: body }],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const sendMessageCreator = (newMessageBody) => ({\r\n  type: SEND_MESSAGE,\r\n  newMessageBody,\r\n});\r\n\r\nexport default dialogsReducer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto___62qn\",\"selectedPage\":\"users_selectedPage__2Pnid\"};","module.exports = __webpack_public_path__ + \"static/media/UsersAva.739297c3.png\";","module.exports = __webpack_public_path__ + \"static/media/preloader.5ea4a24c.svg\";","import * as Axios from \"axios\";\r\n\r\n// Создаем конкретный экземпляр AxiosA-(Instance)- это объекты которые содержат настройки по работе с конкретной API\r\nconst instance = Axios.create({\r\n  withCredentials: true, // в котором сидят настройки запроса,помогает узнать авторизованы или нет\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    \"API-KEY\": \"7ecb0c6c-b2cc-43f2-b68e-676d06268d2b\",//7ecb0c6c-b2cc-43f2-b68e-676d06268d2b\r\n  },\r\n});\r\n\r\n// вспомогательный, который не содержит данных, но содержит методы,  объект с методом getUsers\r\nexport const usersApi = {\r\n  //Запрос чтобы получить Users и тд\r\n  // Если функции нужны данные которых у нее нет она получает данные из параметров (currentPag,pageSize)\r\n  getUsers(currentPage = 1, pageSize = 10) {\r\n    //ruturn то что возвращает нам Get\r\n    return instance\r\n      .get(\r\n        `users?page=${currentPage}&count=${pageSize}`\r\n        //return не тот промис который возвращается методом get выше,\r\n        // а тот что вернул нам .then,  а он возвращает другой промис,\r\n        //в котором сидит не весь response,а только data из response\r\n        //из этого response берем date и возвращаем ее\r\n      )\r\n      .then((response) => {\r\n        return response.data;\r\n      });\r\n  },\r\n\r\n  follow(userId) {\r\n    return instance.post(`follow/${userId}`);\r\n  },\r\n\r\n  unfollow(userId) {\r\n    return instance.delete(`follow/${userId}`);\r\n  },\r\n\r\n  //backward compatibility\r\n  getProfile(userId) {\r\n    console.warn(\"Obsolete method. Please profileApi object.\");\r\n    return profileApi.getProfile(userId);\r\n  },\r\n};\r\n\r\nexport const profileApi = {\r\n  getProfile(userId) {\r\n    return instance.get(`profile/` + userId);\r\n  },\r\n  getStatus(userId) {\r\n    return instance.get(`profile/status/` + userId);\r\n  },\r\n  updateStatus(status) {\r\n    return instance.put(`profile/status`, {\r\n      status: status, //отправляем на сервак объект у которого есть св-во status, см.документацию put запрос\r\n    });\r\n  },\r\n};\r\n\r\n//авторизация\r\n//auth me вернет нам результат отработки метода get\r\n//метода get у instance возвращает промис и на этот промис мы подписываемся методом .then в headerCont..\r\nexport const authApi = {\r\n  me() {\r\n    return instance.get(`auth/me`);\r\n  },\r\n  login(email, password, rememberMe = false) {\r\n    return instance.post(`auth/login`, { email, password, rememberMe });\r\n  },\r\n  logout() {\r\n    return instance.delete(`auth/login`); //сервак удаляет куки\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport s from \"./Navbar.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className={s.nav}>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/profile\" activeClassName={s.activeLink}>\r\n          {/*чтобы происходила смена url в браузере без перезагрузки страницы,использ. NavLink*/}\r\n          Profile\r\n        </NavLink>\r\n      </div>\r\n\r\n      <div className={`${s.item} ${s.active}`}>\r\n        <NavLink to=\"/users\" activeClassName={s.activeLink}>\r\n          Users\r\n        </NavLink>\r\n      </div>\r\n\r\n      <div className={`${s.item} ${s.active}`}>\r\n        <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>\r\n          Messages\r\n        </NavLink>\r\n      </div>\r\n\r\n      <div className={s.item}>\r\n        <NavLink to=\"/news\" activeClassName={s.activeLink}>\r\n          News\r\n        </NavLink>\r\n      </div>\r\n\r\n      <div className={s.item}>\r\n        <NavLink to=\"/video\" activeClassName={s.activeLink}>\r\n          Video\r\n        </NavLink>\r\n      </div>\r\n\r\n      <div className={s.item}>\r\n        <NavLink to=\"/settings\" activeClassName={s.activeLink}>\r\n          Settings\r\n        </NavLink>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport s from \"./News.module.css\";\r\n\r\nconst News = (props) => {\r\n  return <div>News</div>;\r\n};\r\n\r\nexport default News;\r\n ","import React from \"react\";\r\nimport s from \"./Video.module.css\";\r\n\r\nconst Video = (props) => {\r\n  return <div>Video</div>;\r\n};\r\n\r\nexport default Video;\r\n","import React from \"react\";\r\nimport s from \"./Settings.module.css\";\r\n\r\nconst Settings = (props) => {\r\n  return <div>Settings</div>;\r\n};\r\n\r\nexport default Settings;","//вспомогательная функция которая помогает имьютабельно изменить в массиве какой-либо объект\r\nexport const updateObjectInArray = (\r\n  items,\r\n  itemId,\r\n  objPropName,\r\n  newObjProps\r\n) => {\r\n  //пробегаем через масcив users с помощью map(), map() создает новый массив\r\n  // элиментоми которого будут те же самые users,users приходит в callback и возвращается обратно\r\n  return items.map((u) => {\r\n    //если objPropName равен тому id который нужно follow-он сидит в itemId\r\n    // то тогда мы должны у этого пользоват. сделать изменения,\r\n    //но так как у нас имьютабельность мы не пожем пользователя изменить,\r\n    // мы должныы скопировать пользователя и вернуть копию\r\n    //Итог:создали функцию,которая вернет новый массив, в котором заменит (если найдет совпадение по такому objPropName с таким itemId)\r\n    //- в котором заменит старые св-ва\r\n    if (u[objPropName] === itemId) {\r\n      return { ...u, ...newObjProps }; //делаем диструктуриз. этого объекта у него может быть 1 или несколько св-в\r\n    }\r\n    return u;\r\n  });\r\n};\r\n","import { usersApi } from \"../api/api\";\r\nimport { updateObjectInArray } from \"../utils/object-helper\";\r\n\r\n//BLL\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\";\r\n\r\nlet initialState = {\r\n  users: [],\r\n  pageSize: 10,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: true, //крутилка\r\n  //в процессе запроса блокируем кнопку чтобы предотвратить многократные запросы на серв.\r\n  //сделаем массивом и в него будем помещать id того пользователя котрого будем follow/unfollow\r\n  //задача в том что когда идет подписка нужно помещать в массив id пользователя\r\n  // когда отписка, то из массива забираем\r\n  followingInProgress: [],\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FOLLOW:\r\n      return {\r\n        ...state,\r\n        //вспомогательная функция(updateObjectInArray)которая помогает имьютабельно изменить в массиве какой-либо объект\r\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\r\n          followed: true,\r\n        }),\r\n      };\r\n\r\n    case UNFOLLOW:\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\r\n          followed: false,\r\n        }),\r\n      };\r\n\r\n    case SET_USERS: {\r\n      return {\r\n        //c сервера приходят подьзователи, берем старый (...state),\r\n        //берем пользователей,которые там были(users)\r\n        //перезатираем массив новыи пользователи которые пришли из (action.users)\r\n        ...state,\r\n        users: action.users,\r\n      };\r\n    }\r\n    //при клике меняем текущую страницу(currentPage)\r\n    case SET_CURRENT_PAGE: {\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    }\r\n    case SET_TOTAL_USERS_COUNT: {\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.count,\r\n      };\r\n    }\r\n\r\n    case TOGGLE_IS_FETCHING: {\r\n      return {\r\n        ...state, //в action будет сидеть либо true либо false который надо установить\r\n        isFetching: action.isFetching,\r\n      };\r\n    }\r\n\r\n    case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? //если true когда идет подписка то добавляем новую id которая приходит в action\r\n            [...state.followingInProgress, action.userId]\r\n          : // а если false то отфильтруем не нужного пользователя,пропускаем только ту id, которая не равна id из в action (userId)\r\n            state.followingInProgress.filter((id) => id !== action.userId),\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}; //map() возвращает новый массив на основе страрого массива\r\n\r\nexport const followSuccess = (userId) => ({ type: FOLLOW, userId });\r\nexport const unfollowSuccess = (userId) => ({ type: UNFOLLOW, userId });\r\n//action который будет SetАТЬ users-устанавливать users\r\nexport const setUsers = (users) => ({ type: SET_USERS, users });\r\nexport const setCurrentPage = (currentPage) => ({\r\n  type: SET_CURRENT_PAGE,\r\n  currentPage,\r\n});\r\n//количество пользователей\r\nexport const setTotalUsersCount = (totalUserCount) => ({\r\n  type: SET_TOTAL_USERS_COUNT,\r\n  count: totalUserCount,\r\n});\r\nexport const toggleIsFetching = (isFetching) => ({\r\n  type: TOGGLE_IS_FETCHING,\r\n  isFetching,\r\n});\r\n\r\nexport const toggleIsFollowingProgress = (isFetching, userId) => ({\r\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n  isFetching,\r\n  userId,\r\n});\r\n\r\n//================================Thunk=======================================\r\n\r\nexport const requestUsers = (page, pageSize) => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching(true));\r\n    dispatch(setCurrentPage(page)); //диспачим actions\r\n    //вызываем getUsers из api.js\r\n    let data = await usersApi.getUsers(page, pageSize);\r\n    dispatch(toggleIsFetching(false)); //диспачим actions\r\n    dispatch(setCurrentPage(page)); //диспачим actions\r\n    dispatch(setUsers(data.items)); //это и есть массив наших пользоват (response.data.items)\r\n    dispatch(setTotalUsersCount(data.totalCount)); //121  //количество пользователей\r\n  };\r\n};\r\n\r\n//Общий метод внутри которогонаписаны параметры которые принимают ThunkИ - follow u unfollow\r\n//вся дублирующиеся логика перенесли сюда\r\nconst followUnfollowFlow = async (\r\n  dispatch,\r\n  userId,\r\n  apiMethod,\r\n  actionCreator\r\n) => {\r\n  dispatch(toggleIsFollowingProgress(true, userId)); // перед запросом диспачим true\r\n  let response = await apiMethod(userId); //\"посредник в виде DAL как на схеме\"\r\n  //сервер подтв. что подписка или отписка произошла\r\n  //и мы должны задиспачить этот callback в reducer\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(actionCreator(userId));\r\n  }\r\n  dispatch(toggleIsFollowingProgress(false, userId)); //когда запрос закончится то диспачим false\r\n};\r\n\r\nexport const follow = (userId) => {\r\n  return async (dispatch) => {\r\n    followUnfollowFlow(\r\n      dispatch,\r\n      userId,\r\n      usersApi.follow.bind(usersApi),\r\n      followSuccess\r\n    );\r\n  };\r\n};\r\nexport const unfollow = (userId) => {\r\n  return async (dispatch) => {\r\n    followUnfollowFlow(\r\n      dispatch,\r\n      userId,\r\n      usersApi.unfollow.bind(usersApi),\r\n      unfollowSuccess\r\n    );\r\n  };\r\n};\r\n\r\nexport default usersReducer;\r\n\r\n//см. пример и комменты в profile-reducer.js и про reducer\r\n","import React, { useState } from \"react\";\r\nimport styles from \"./../Paginator/Paginator.module.css\";\r\nimport cn from \"classnames\";\r\n\r\n//Paginator служит для постраничного вывода пользователей\r\n\r\n// чистая функциональная презентац. компонента\r\n//получает только данные из props и возвращает callback ниже\r\nlet Paginator = ({\r\n  totalItemsCount,\r\n  pageSize,\r\n  currentPage,\r\n  onPageChanged,\r\n  portionSize = 10,\r\n}) => {\r\n  //Math.ceil округляет до целого числа, делим количество пользователей(сколько всего) на размер страницы и получаем кол-во страниц\r\n  let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n  // и рисуем кол-во этих страниц - создаем массив\r\n  let pages = [];\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i);\r\n  }\r\n\r\n  //определяем границы см тетрадь\r\n  let portionCount = Math.ceil(pagesCount / portionSize); //берем все стр которые получили выше,(все pageCount-вся огромная полоса из чисел страниц) и делим на размер порции (portionSize-кол-во станиц котрые хотим видеть) и выводиться 10 стр.\r\n  let [portionNumber, setPortionNumber] = useState(1);\r\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1; //определяем левую границу порции(leftPortionPageNumber)\r\n  let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n  return (\r\n    <div className={styles.paginator}>\r\n      {/* показываем PREV если portionNumber > 1 и потом установи setPortionNumber(функция из хука) установи portionNumber(текущая порция) минус 1 */}\r\n      {portionNumber > 1 && (\r\n        <button\r\n          onClick={() => {\r\n            setPortionNumber(portionNumber - 1);\r\n          }}\r\n        >\r\n          PREV\r\n        </button>\r\n      )}\r\n\r\n      {pages\r\n        .filter(\r\n          (p) => p >= leftPortionPageNumber && p <= rightPortionPageNumber //нужно отрисовать только те страницы которые больше левой границы(leftPortionPageNumber-номер страницы левой границы)  //проверяем, те страницы фильтрация которых вернет true, т.е.(для страниц, которые больше или равно левой границы и меньше либо равно правой границы)\r\n        )\r\n        .map((p) => {\r\n          return (\r\n            <span\r\n              //если currentPage равна {p}-(которую мы push выше)\r\n              //то тогда styles.selectedPage прийдет в className\r\n              className={cn(\r\n                {\r\n                  [styles.selectedPage]: currentPage === p,\r\n                },\r\n                styles.pageNumber\r\n              )}\r\n              //(р) по которой мы итерируемся-(пробегем),\r\n              // она будет текущей страницей при нажатии и изменитсья CurrentPage\r\n              //обработчиком события будет эта функция\r\n              key={p}\r\n              onClick={(e) => {\r\n                onPageChanged(p);\r\n              }}\r\n            >\r\n              {p}\r\n            </span> //{p} - номер страницы\r\n          );\r\n        })}\r\n      {/* А NEXT показываем тогда когда мы знаем что кол-во порций > чем текущая порция которую показываем*/}\r\n      {portionCount > portionNumber && (\r\n        <button\r\n          onClick={() => {\r\n            setPortionNumber(portionNumber + 1); //а если NEXT показывается,то при клике на эту кнопку мы уст. portionNumber на 1 больше, тем та что есть\r\n          }}\r\n        >\r\n          NEXT\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paginator;\r\n","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/UsersAva.png\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n// чистая функциональная презентац. компонента\r\n//получает только данные из props и возвращает callback ниже\r\n//для отрисовки нужен только user\r\nlet User = ({ user, followingInProgress, unfollow, follow }) => {\r\n  return (\r\n    <div>\r\n      <span>\r\n        <div>\r\n          <NavLink to={\"/profile/\" + user.id}>\r\n            {/* //если small не равен null, тогда берем small \r\n            // в противном случае берем фиксированную картинку  */}\r\n            <img\r\n              src={user.photos.small != null ? user.photos.small : userPhoto}\r\n              className={styles.userPhoto}\r\n            />\r\n          </NavLink>\r\n        </div>\r\n        <div>\r\n          {/* исп. тернарный оператор (? и :)\r\n            когда кликнут,отработает callback функция (которую создает connect)\r\n            и возьмет в пропсах follow или unfollow  и передаст туда id\r\n            */}\r\n          {user.followed ? (\r\n            <button //если кто-нибудь в этом массиве равен user.id то тогда метод some вернет true или false\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                //во время onClick мы вызываем то что приходит из пропсов\r\n                unfollow(user.id);\r\n              }}\r\n            >\r\n              Unfollow\r\n            </button>\r\n          ) : (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                follow(user.id);\r\n              }}\r\n            >\r\n              Follow\r\n            </button>\r\n          )}\r\n        </div>\r\n      </span>\r\n\r\n      <span>\r\n        <span>\r\n          <div>{user.name}</div>\r\n          <div>{user.status}</div>\r\n        </span>\r\n        <span>\r\n          <div>{\"user.location.country\"}</div>\r\n          <div>{\"user.location.city\"}</div>\r\n        </span>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import React from \"react\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\n//эта страница отрисовывает paginator и каждого пользователя\r\n// чистая функциональная презентац. компонента\r\n//получает только данные из props и возвращает callback ниже\r\nlet Users = ({\r\n  currentPage,\r\n  onPageChanged,\r\n  totalUsersCount,\r\n  pageSize,\r\n  users,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <div>\r\n      {/*занимаеться отрисовкой кнопок при переходе между страницами*/}\r\n      <Paginator\r\n        currentPage={currentPage}\r\n        onPageChanged={onPageChanged}\r\n        totalItemsCount={totalUsersCount}\r\n        pageSize={pageSize}\r\n      />\r\n      <div>\r\n        {/* //когда у нас map или массив не забываем ставить key={} */}\r\n        {users.map((u) => (\r\n          <User\r\n            user={u}\r\n            followingInProgress={props.followingInProgress}\r\n            follow={props.follow}\r\n            unfollow={props.unfollow}\r\n            key={u.id}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import { createSelector } from \"reselect\";\r\n\r\n//Селекторы\r\n\r\n//cелектор который работает без фильтрации а из state возвращает-users\r\nconst getUsersSelector = (state) => {\r\n  return state.usersPage.users;\r\n};\r\n\r\n// cелектор который занимается фильтрацией - ему нужны users, он их берет спомощью другого селектора-более примитивного\r\n//Hаш селектор всегда будет зависить не от всего state целиком а от его частей\r\n//создаем с помощью специальной функции(createSelector), которая приходит из reselect библиотеки\r\n//во внутрь-() передаем функцию которая будет выбирать что-то из state\r\n//этой функции чтобы сделать свою логику выборки, нужно получить на входе то из чего эта выборка будет происходить-(users) и на основании этой выборке будем возвращать результат\r\n//а первым параметром передаем тот селектор, который будет использоваться для того чтобы получить значения из функции выше и потом их закинуть сюда - (users).\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n  return users.filter((u) => true);\r\n});\r\n\r\nexport const getPageSize = (state) => {\r\n  return state.usersPage.pageSize;\r\n};\r\n\r\nexport const getTotalUsersCount = (state) => {\r\n  return state.usersPage.totalUsersCount;\r\n};\r\n\r\nexport const getCurrentPage = (state) => {\r\n  return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getIsFetching = (state) => {\r\n  return state.usersPage.isFetching;\r\n};\r\n\r\nexport const getFollowingInProgress = (state) => {\r\n  return state.usersPage.followingInProgress;\r\n};\r\n\r\n//селектор это функция  которая принимает state целиком, берет из него то что нужно и возвращает BLL\r\n// Логика: прежеде чем перезапускать функцию, библетека reselect посмотрит зависимости, не изменилось ли что-то в памяти и только потом перезапустит функцию и нам вернется новый результат\r\n","//UI\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  unfollow,\r\n  follow,\r\n  setCurrentPage,\r\n  toggleIsFollowingProgress,\r\n  requestUsers,\r\n} from \"../../Redux/Users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport {\r\n  getCurrentPage,\r\n  getFollowingInProgress,\r\n  getIsFetching,\r\n  getPageSize,\r\n  getTotalUsersCount,\r\n  getUsers,\r\n} from \"../../Redux/users-selectors\";\r\n\r\n//теперь UI у нас нaпрямую общается с BLL\r\n\r\nclass UsersContainer extends React.Component {\r\n  //конструирование объекта происходить лишь 1 раз\r\n  //базоваяя задача,передать эти props,передать конструирование родительской компоненте (React.Component)\r\n  // componentDidMount это такие методы которые есть у объекта который, создан с помощью этого класса,\r\n  // этот объект отвечает за компоненту и react взаимодействует с этим объектом\r\n  //компонента через пропсы обращается к BLL\r\n  componentDidMount() {\r\n    //сюда попадает не thunk a callback\r\n    const {currentPage, pageSize} = this.props\r\n    this.props.getUsers(currentPage, pageSize);\r\n  }\r\n\r\n  //Метод чтобы делать ajax запрос во время клика\r\n  onPageChanged = (pageNumber) => {\r\n    const {pageSize} = this.props\r\n    this.props.getUsers(pageNumber, pageSize); //getUsers вызывает calback который пришел от родителя\r\n  };\r\n\r\n  render() {\r\n    //Презентац компонента\r\n    // <>-это React фрагмент, мы возвращаем больше чем 1 компоненту\r\n    return (\r\n      <>\r\n        {/* //если данные приходят то отобразим img если нет то null */}\r\n        {this.props.isFetching ? <Preloader /> : null}\r\n        <Users\r\n          totalUsersCount={this.props.totalUsersCount}\r\n          pageSize={this.props.pageSize}\r\n          currentPage={this.props.currentPage}\r\n          onPageChanged={this.onPageChanged}\r\n          users={this.props.users}\r\n          unfollow={this.props.unfollow}\r\n          follow={this.props.follow}\r\n          followingInProgress={this.props.followingInProgress}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    //значения из initialState-cелекторы из user-reducers\r\n    users: getUsers(state),\r\n    pageSize: getPageSize(state),\r\n    totalUsersCount: getTotalUsersCount(state),\r\n    currentPage: getCurrentPage(state),\r\n    isFetching: getIsFetching(state),\r\n    followingInProgress: getFollowingInProgress(state),\r\n  };\r\n};\r\n\r\n//===============================HOC=======================================================================\r\n\r\n//см. комменты в DialogsContainer!!!\r\nexport default compose(\r\n  withAuthRedirect,\r\n  connect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setCurrentPage, //pageNumber-номер страницы который нам нужно dispatch\r\n    toggleIsFollowingProgress,\r\n    //создается callback который внутри себя вызовит эту thunk и задиспачит ее результат\r\n    getUsers: requestUsers,\r\n  })\r\n)(UsersContainer);\r\n//===============================HOC=======================================================================\r\n\r\n// создаем еще одну контейнерную компоненту (mapStateToProps) с помощью Функции connect\r\n//   !!! каждый шаг см. комменты в DialogsContainer!!!\r\n","import React from \"react\";\r\nimport s from \"./Header.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nconst Header = (props) => {\r\n  return (\r\n    <header className={s.header}>\r\n      <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/React-icon.svg/768px-React-icon.svg.png\" />\r\n\r\n      {/* //если мы авторизованы то покажем login,\r\n        // если нет то показ. ссылку на  авторизацию */}\r\n      <div className={s.loginBlock}>\r\n        {props.isAuth ? (\r\n          <div>\r\n            {props.login} - <button onClick={props.logout}>Logout</button>\r\n          </div>\r\n        ) : (\r\n          <NavLink to={\"/login\"}>Login</NavLink>\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { authApi } from \"../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\n\r\nconst SET_USER_DATA = \"social-network/auth/SET_USER_DATA\";\r\n\r\nlet initialState = {\r\n  userId: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false, //еси true то показываем login (булево значение)\r\n  // isFetching: true,\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_USER_DATA:\r\n      return {\r\n        ...state,\r\n        // в data сидят объекты из initialState\r\n        ...action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\r\n  type: SET_USER_DATA,\r\n  payload: { userId, email, login, isAuth },\r\n});\r\n\r\n//===================================Thunk====================================\r\n\r\n//cm. стр 33\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n  let response = await authApi.me(); //по факту me() возвращает нам промис и мы на него thenМся (любой then тоже возвращает промис)  //me() никакие параменты не принимат поэтому (значит для запроса не нужно ничего знать) в thunCreator()- ничего не передаем\r\n  //если if то в этом случае мы залогинены и диспачим эти авторизационные данные\r\n  if (response.data.resultCode === 0) {\r\n    let { id, email, login } = response.data.data;\r\n    dispatch(setAuthUserData(id, email, login, true)); //и вызываем АС с теми данными которые получили из response из сервака\r\n  }\r\n};\r\n\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {\r\n  let response = await authApi.login(email, password, rememberMe);\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(getAuthUserData()); //Диспачим thunk чтобы получить инфу обо мне\r\n  } else {\r\n    let message =\r\n      response.data.messages.length > 0\r\n        ? response.data.messages[0]\r\n        : \"Some error\";\r\n    dispatch(stopSubmit(\"login\", { _error: message })); //проблемное поле которое вызвало ошибку(stopSubmit)) cтр 26!!!\r\n  }\r\n};\r\n\r\n//когда делается logout сервак удаляет cookie и мы должны зачистить состояние\r\nexport const logout = () => async (dispatch) => {\r\n  let response = await authApi.logout();\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(setAuthUserData(null, null, null, false)); // делается logout должны занулить все что знали о пользователе\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n//см. пример и комменты в profile-reducer.js и про reducer\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport { connect } from \"react-redux\";\r\nimport { logout } from \"../../Redux/auth-reducer \";\r\n\r\nclass HeaderContainer extends React.Component {\r\n  render() {\r\n    return <Header {...this.props} />;\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n  login: state.auth.login,\r\n});\r\n\r\nexport default connect(mapStateToProps, { logout })(HeaderContainer);\r\n\r\n// создаем еще одну контейнерную компоненту (mapStateToProps) с помощью Функции connect\r\n//   !!! каждый шаг см. комменты в DialogsContainer!!!\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\nimport { required } from \"../../utils/validators/validators\";\r\nimport { createField, Input } from \"../common/FormsControls/FormsControls\";\r\nimport { login } from \"../../Redux/auth-reducer \";\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\";\r\n\r\n//деструктуризация параметров, вместо того чтобы постоянно писать props записываем то что они передаеют\r\nconst LoginForm = ({ handleSubmit, error }) => {\r\n  return (\r\n    //при вводе в пропсах приходит callback \"handleSubmit\" (который дает ReduxForm) мы должны повесить на его на событие формы onSubmit и доверяем ему обработку handleSubmit\r\n    <form onSubmit={handleSubmit}>\r\n      {createField(\"Email\", \"email\", [required], Input)}\r\n      {createField(\"Password\", \"password\", [required], Input, {\r\n        type: \"password\",\r\n      })}\r\n      {createField(\r\n        null,\r\n        \"rememberMe\",\r\n        [],\r\n        Input,\r\n        { type: \"checkbox\" },\r\n        \"rememberMe\"\r\n      )}\r\n\r\n      {/* //показываем props.error только тогда когда есть ошибка */}\r\n      {error && <div className={style.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\n//LoginReduxForm обрачивает LoginForm. reduxForm(hoc)\r\nconst LoginReduxForm = reduxForm({ form: \"login\" })(LoginForm);\r\n\r\n//сюда придут все значения из form\r\nconst Login = (props) => {\r\n  const onSubmit = (formData) => {\r\n    props.login(formData.email, formData.password, formData.rememberMe); //из пропсов вызываем логин он приходит благодаря connect.(Но здесь приходит не login из thunkCreatorA ниже). Когда поподает сюда в пропсы, connect засовывает под тем же самым именем другую функцию-callback,которая внутри себя диспачит вызов {login}-thunkCreatorA\r\n    //Итог: callback принимает параметры с (formData...) а потом диспачит вызов thunkCreatorA-{login} и в него передаются эти же параметры что передаются в callback\r\n  };\r\n\r\n  if (props.isAuth) {\r\n    return <Redirect to={\"/profile\"} />;\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} />\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  //возвращ объект\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(Login); //здесь login явл. thunkCreatorOM\r\n","import { authApi } from \"../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { getAuthUserData } from \"./auth-reducer \";\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\";\r\n\r\nlet initialState = {\r\n  initialized: false, //сначала приложение не инициализировано\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case INITIALIZED_SUCCESS:\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const initializedSuccess = () => ({ type: INITIALIZED_SUCCESS });\r\n\r\n//===================================Thunk====================================\r\n\r\n//Thunk для инициализации\r\nexport const initializeApp = () => (dispatch) => {\r\n  let promise = dispatch(getAuthUserData()); //диспачим получение инициализационных данных  и когда эти данные будут получены, возвращаем промис из auth-reducer(thunk getAuthUserData)\r\n  //когда пройдет resolve тогда значит асинхронная операция закончена и инициализ. завершена и говорим succsess\r\n  Promise.all([promise]) //если будет несколько промисов тогда  Promise.all\r\n    .then(() => {\r\n      dispatch(initializedSuccess()); // мы должны диспачить initializedSuccess\r\n    });\r\n};\r\n\r\nexport default appReducer;\r\n//см. пример и комменты в profile-reducer.js и про reducer\r\n\r\n//создаем reducer, который будет отвечать за все приложение\r\n"," let initialState = {}\r\n \r\n const sidebarReducer = (state = initialState, action) => {\r\n  //Reducer принимает state и action\r\n\r\n  return state;\r\n};\r\n\r\nexport default sidebarReducer","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport sidebarReducer from \"./Sidebar-reducer\";\r\nimport dialogsReducer from \"./Dialogs-reducer\";\r\nimport profileReducer from \"./Profile-reducer\";\r\nimport usersReducer from \"./Users-reducer\";\r\nimport authReducer from \"./auth-reducer \";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport appReducer from \"./app-reducer\";\r\n\r\n//Фукция которая объединяет все reducer\r\n//ветки голобального state\r\nlet reducers = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  sidebar: sidebarReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; //это св-во добавляет extension(расширение) если оно подключено то оно добавит в глобальный объект window это св-во то оно будет работать в качестве расширителя если нет то тогда исп compose\r\nconst store = createStore(\r\n  reducers,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\n\r\nwindow._store_ = store;\r\n\r\nexport default store;\r\n","import React, { Suspense } from \"react\";\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\nexport const withSuspense = (Component) => {\r\n  return (props) => {\r\n    return (\r\n      <Suspense fallback={<Preloader />}>\r\n        <Component {...props} />\r\n      </Suspense>\r\n    );\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport { BrowserRouter, Route, withRouter } from \"react-router-dom\";\r\nimport News from \"./components/News/News\";\r\nimport Video from \"./components/Video/Video\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport LoginPage from \"./components/Login/Login\";\r\nimport { connect, Provider } from \"react-redux\";\r\nimport { initializeApp } from \"./Redux/app-reducer\";\r\nimport { compose } from \"redux\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport store from \"./Redux/redux-store\";\r\nimport { withSuspense } from \"./hoc/withSuspense\";\r\nconst DialogsContainer = React.lazy(() =>\r\n  import(\"./components/Dialogs/DialogsContainer\")\r\n); //есть какая-то компонента но она отрисуется только тогда когда за ней удет запрос,но в итоговый бандл эта комонента не попадает,что значит снижает нагрузку при отрисовке\r\nconst ProfileContainer = React.lazy(() =>\r\n  import(\"./components/Profile/ProfileContainer\")\r\n);\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.initializeApp();\r\n  }\r\n\r\n  render() {\r\n    //если не проиниц. то вернем Preloader\r\n    if (!this.props.initialized) {\r\n      return <Preloader />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"app-wrapper\">\r\n        <HeaderContainer />\r\n        <Navbar />\r\n        <div className=\"app-wrapper-content\">\r\n          <Route\r\n            path=\"/profile/:userId?\" //userId говорит что в url есть params{}, ? говорит что параметр не обязат.19 мин 60 видео\r\n            render={withSuspense(ProfileContainer)}\r\n          />\r\n          <Route //следит за url,смотрит на адресную строку\r\n            path=\"/dialogs\"\r\n            render={withSuspense(DialogsContainer)}\r\n          />\r\n\r\n          <Route path=\"/users\" render={() => <UsersContainer />} />\r\n\r\n          <Route path=\"/login\" render={() => <LoginPage />} />\r\n\r\n          <Route path=\"/news\" render={() => <News />} />\r\n          <Route path=\"/video\" render={() => <Video />} />\r\n          <Route path=\"/settings\" render={() => <Settings />} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  initialized: state.app.initialized, //на это initialize будем равнятся в return который выше\r\n  //то есть мы будем возвращать всю разметку только тогда когда мы проинициализировались\r\n});\r\n\r\nlet AppContainer = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp })\r\n)(App); //диспачим thunk initializeApp\r\n\r\n//cм стр 28(getAuthUserData)\r\n\r\n//все оборачивание которое происходило в index.js переносим сюда\r\nconst ReactApp = (props) => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <AppContainer />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default ReactApp;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport ReactApp from \"./App\";\r\n\r\nReactDOM.render(<ReactApp />, document.getElementById(\"root\"));\r\n","import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\nimport styles from \"./FormsControls.module.css\";\r\n\r\nconst FormControl = ({ input, meta: { touched, error }, children }) => {\r\n  //если этот элемент был тронут(touched) и meta.error есть. то покажи span,\r\n  //в противном случае span не показывем.\r\n  // Должен быть виден только при обшибке.\r\n  const hasError = touched && error;\r\n  return (\r\n    <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\n//Чтобы избежать дублирования мы создаем child\r\n//Textarea теперь явл. контейнером над FormControl\r\n// Отрисовываем FormControl и внутрь прердаем  textarea(child)\r\n// и получается что FormControl это вся логика выше.\r\nexport const Textarea = (props) => {\r\n  const { input, meta, child, ...restProps } = props; //restProps-остаточные рrops\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const Input = (props) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const createField = (\r\n  placeholder,\r\n  name,\r\n  validators,\r\n  component,\r\n  props = {}, //по умолчанию будет пустой объект\r\n  text = \"\" //текста может и не быть,но если он есть,то отобразим рядом с field\r\n) => (\r\n  <div>\r\n    {/*Field - компоненты(контейнерная)  которые отрисовывают указанный элемент, в нашем случае input  */}\r\n    {/* Любая форма должна отправлятся на сервак под каким-то name={\"\"} */}\r\n    {/* Redux-Form будет реагировать на эти Name чтобы обеспечить нашу логику. В Field onChange уже засетаны,они будут брать эти name{\"} и будут общаться со своим state */}\r\n    <Field\r\n      placeholder={placeholder}\r\n      name={name}\r\n      validate={validators}\r\n      component={component}\r\n      {...props}\r\n    />\r\n    {text}\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\"\r\n\r\n// Компонента заргрузочной картинки\r\nlet Preloader = (props) => {\r\n  return (\r\n    <div>\r\n      <img src={preloader} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n// import preloader from \"../../assets/images/preloader.svg\";\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__wzz_E\",\"error\":\"FormsControls_error__1co-x\",\"formSummaryError\":\"FormsControls_formSummaryError__ygKlc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1RSHK\",\"pageNumber\":\"Paginator_pageNumber__2xZLg\",\"selectedPage\":\"Paginator_selectedPage__1lR0K\"};","export const required = (value) => {\r\n  if (value) return undefined;\r\n  return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n  if (value.length > maxLength) return `Max length is ${maxLength} symbols`; //если значение есть и оно > 10 то\r\n  return undefined;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__7GHHC\",\"loginBlock\":\"Header_loginBlock__28QN5\"};","import { authApi, usersApi, profileApi } from \"../api/api\";\r\n\r\nconst ADD_POST = \"ADD_POST\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst SET_STATUS = \"SET_STATUS\";\r\n// const DELETE_POST = \"DELETE_POST\";\r\n\r\n//Инициализирует profileReducer в случае если state не прийдет в функцию\r\nlet initialState = {\r\n  posts: [\r\n    { id: 1, message: \"Я вложил в капитал\", likesCount: 10 },\r\n    { id: 2, message: \"Хочешь знать в какой?\", likesCount: 23 },\r\n    { id: 3, message: \"Капитал прожиточного минимума\", likesCount: 133 },\r\n  ],\r\n  profile: null,\r\n  status: \"\",\r\n};\r\n//Reducer принимает state и action преобразовывает и возвращает преобразованный state\r\n//приходит не весь state а только та часть которая нужна конкретному Reducer\r\nconst profileReducer = (state = initialState, action) => {\r\n  //Конструкция switch заменяет собой сразу несколько if.\r\n  //Она представляет собой более наглядный способ сравнить выражение сразу с несколькими вариантами\r\n  switch (action.type) {\r\n    case ADD_POST: {\r\n      let newPost = {\r\n        id: 5,\r\n        message: action.newPostText,\r\n        likesCount: 0,\r\n      };\r\n      // Для чего нужно копирование и как работпет  см 48 с 21 мин.\r\n      // копия state. (см 47 видос с 12 мин и с 18)\r\n      return {\r\n        ...state,\r\n        //копия массива из state  см. выше\r\n        posts: [...state.posts, newPost],\r\n        newPostText: \"\",\r\n      };\r\n    }\r\n\r\n    case SET_USER_PROFILE: {\r\n      return {\r\n        ...state,\r\n        //меняем profile на profile который сидит в action\r\n        profile: action.profile,\r\n      };\r\n    }\r\n    case SET_STATUS: {\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      };\r\n    }\r\n\r\n    // //для примера теста\r\n    // case SET_STATUS: {\r\n    //   return {\r\n    //     ...state, posts: state.posts.filter(p => p.id !=action.postId)\r\n    //   };\r\n    // }\r\n\r\n    default:\r\n      return state; // case по умолчанию\r\n  }\r\n};\r\n// В каждом case нужно делать break иначе он будет проваливаться дальше,\r\n// но мы внутри каджного case будем возвращать return, когда return посреди функции она перестает работать,\r\n// значит дальше в case проваливаться она не будет ,break можно не использовать\r\n\r\n//Функция ничего не принемает и возвращает объект (ADD_POST)\r\n// addPostActionCreator вспомогательная функция которая помогает не ошибиться в создании Action\r\n//ActionCreator необходимо создавать чтобы их заДиспачить (dispatch)\r\n//ActionCreator пользуються пользователи UI\r\nexport const addPostCreator = (newPostText) => ({\r\n  type: ADD_POST,\r\n  newPostText,\r\n});\r\n\r\nexport const setUserProfile = (profile) => ({\r\n  type: SET_USER_PROFILE,\r\n  profile,\r\n});\r\nexport const setStatus = (status) => ({ type: SET_STATUS, status });\r\n\r\n// export const deletePost = (postId) => ({ type: DELETE_POST, postId });\r\n\r\n//===================================Thunk====================================\r\n\r\n//Thunk-функция которая принемает-(метод dispatch) все что нужно thunk из данных диспачим в (thunkCreator)\r\n//(thunkCreator) функция которая что-то принемает и возвращает thunk (функция возвращающая др. функц. благодаря замыканию)\r\n//диспачим вызов ActionCreatorОВ\r\n//(thunkCreator) ниже. принимает в параметрах нужные данные\r\n//а потом возвращает саму thunk, потом через замыкание к этим данным может достучаться\r\n\r\nexport const getUsersProfile = (userId) => async (dispatch) => {\r\n  let response = await usersApi.getProfile(userId);\r\n  dispatch(setUserProfile(response.data)); //это и есть массив наших пользоват (response.data.items)\r\n};\r\n\r\nexport const getStatus = (userId) => async (dispatch) => {\r\n  let response = await profileApi.getStatus(userId);\r\n  dispatch(setStatus(response.data));\r\n};\r\n\r\n//thunk которая будет слать запрос на сервак чтобы обновить статус\r\n//тот status который сюда пришел-(первая строчка) мы его сетаем(setStatus) чтобы его отобразить\r\nexport const updateStatus = (status) => async (dispatch) => {\r\n  let response = await profileApi.updateStatus(status);\r\n  //если resultCode 1 то какая-то ощибка, если 0 о то все ок\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(setStatus(status));\r\n  }\r\n};\r\n\r\nexport default profileReducer;\r\n\r\n//пустой шаблон thunk\r\n// export const getAuthUserData = () => (dispatch) => {\r\n// }\r\n"],"sourceRoot":""}