{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","isAuth","dialogsItems","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","withAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,+FCY/HC,EATI,SAACC,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACE,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QACjC,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,QCEjBC,EANC,SAACT,GACf,OAAO,yBAAKG,UAAWC,IAAEC,QAASL,EAAMU,U,yCCGpCC,EAAcC,YAAiB,IAoBtBC,cAAU,CAAEC,KAAM,wBAAlBD,EAlBQ,SAACb,GACtB,OACE,0BAAMe,SAAUf,EAAMgB,cACpB,6BACE,kBAACC,EAAA,EAAD,CACEC,UAAWC,IACXX,KAAK,iBACLY,YAAY,qBACZC,SAAU,CAACC,IAAUX,MAGzB,6BACE,6CCcOY,EA3BC,SAACvB,GACf,IAAIwB,EAAQxB,EAAMyB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OACtC,kBAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAMsB,IAAKD,EAAE3B,GAAIA,GAAI2B,EAAE3B,QAEzC6B,EAAmBP,EAAMQ,SAASJ,KAAI,SAACK,GAAD,OACxC,kBAAC,EAAD,CAASvB,QAASuB,EAAEvB,QAASoB,IAAKG,EAAE/B,QAOtC,OAAKF,EAAMkC,OAGT,yBAAK/B,UAAWC,IAAEuB,SAChB,yBAAKxB,UAAWC,IAAE+B,cAAeT,GACjC,yBAAKvB,UAAWC,IAAE4B,UAChB,6BAAMD,IAER,kBAAC,EAAD,CAAgBhB,SAZA,SAACqB,GACnBpC,EAAMqC,YAAYD,EAAOE,oBAGD,kBAAC,IAAD,CAAU/B,GAAI,Y,wBC+C3BgC,sBACbC,aAtDoB,SAAChB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACgB,GACtB,MAAO,CACHJ,YAAa,SAACC,GACVG,EAASC,YAAmBJ,SA+CtCK,IAHaJ,CAIbhB","file":"static/js/4.35cbcae6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__WZG-C\",\"dialogsItems\":\"Dialogs_dialogsItems__1X4rH\",\"active\":\"Dialogs_active__LvEmX\",\"messages\":\"Dialogs_messages__3fVZ7\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={s.dialog + \" \" + s.active}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\n\r\nconst Message = (props) => {\r\n  return <div className={s.dialog}>{props.message}</div>;\r\n};\r\n\r\n\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport {\r\n  maxLengthCreator,\r\n  required,\r\n} from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          name=\"newMessageBody\"\r\n          placeholder=\"Enter your message\"\r\n          validate={[required, maxLength50]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default reduxForm({ form: \"dialogAddMessageForm\" })(AddMessageForm);\r\n\r\n//   !!! каждый шаг см. комменты и в тетради стр 24-25 !!!\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\"\r\n\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map((d) => (\r\n    <DialogItem name={d.name} key={d.id} id={d.id} />\r\n  ));\r\n  let messagesElements = state.messages.map((m) => (\r\n    <Message message={m.message} key={m.id} />\r\n  ));\r\n\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageBody);\r\n  };\r\n\r\n  if (!props.isAuth) return <Redirect to={\"/login\"} />;\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.messages}>\r\n        <div>{messagesElements}</div>\r\n      </div>\r\n      <AddMessageForm onSubmit={addNewMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n\r\n//   !!! каждый шаг см. комменты и в тетради стр 20-23 !!!\r\n","import React from \"react\";\r\nimport { sendMessageCreator } from \"../../Redux/Dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n//компонента должна получать только данные и callbacku\r\n\r\n//формируем 2 объекта которые соединяються в\r\n//один и приходят как пропсы внутрь (Dilogs)\r\n//Смысл первой функции принимать весь глобальный state целиком-\r\n//-(глобальный state) всего приложения и возвращает объект\r\n// только с теми данными которые нам нужны\r\n\r\n//превратить часть State(state.dialogsPage) в пропсы.\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\n////Все callbackИ, которые DispatchАТ что-то в state мы закидываем в mapDispatchToProps\r\n//служит для того чтобы передавать дочерней презентационной компоненте,через пропсы callback\r\n//про эту функцию (mapDispatchToProps) смотри объяснение в 49 ролике, с 38.25\r\n//мы dispatch не (actionCreator) мы dispatch результат работы (actionCreator)\r\n//мы его вызываем а он возвращает нам action,тое-есть dispatch всегда action\r\n\r\n//Контейнерная компонента, вызываем функцию connect и она возвращает другую функцию\r\n//и мы вызываем потом ту функцию,которую вернул нам предыдущий вызов\r\n//Так же conect делает запрос к store и получет от него callback\r\n// Контейнерная компонента обязана перенаправить все что приходит в нее, в дочернею презентац. компоненту\r\n\r\n//Dialogs законектили к storУ.\r\n//      Функция connect создает контейн.компоненту (mapStateToProps), внутри этой компоненты\r\n//      она рендерит презентац компоненту-см.выше и в нее в качестве пропсов\r\n//      передает те св-ва которые сидят в  mapStateToProps  и mapDispatchToProps\r\n//      connect делает запросы к store\r\n\r\n//UPDATE  mapDispatchToProps\r\n//Контейнерная компонента над другой контейнерной компонентой\r\n// Это объект АС(ов) который мы закидываем вторым параметром в функцию connect\r\n// можно не писать dispatch каждый раз тк. connect может это сделать автоматически\r\n//автоматически  обертывание calback(АМИ)\r\n// connect определяет что к нему пришла не функция а объкт\r\n//И еще, если мы в объекте пишем (name:name) как делаем это ниже\r\n// то мы можем написать просто (name),это означает,я создам в объекте св-во (name)\r\n//значением которого возьму значение переменной\r\n\r\n//===============================HOC=======================================================================\r\n// про HOC и его логику дополнительно см. в withAuthRedirect\r\n\r\n//создаем конт. компон. на которую перенапрявляем Redirect, одна компон. над другой (AuthRedirectComponent над ProfileContainer)\r\n//логика: 1)целевая компонента. над ней 2)witchRouter. 3) над ней connect. 4)над ней Redirect.\r\n//главное что каждый слой добавляет свое поведение\r\n//в конечном итоге нарисуется наша целивая компонента (так работае hoc)\r\n\r\n//compose вернул нам функцию и мы вызываем ту функцию которую он вернул\r\n//compose аватоматически возьмет Dialogs и закинет его в вызов функции withAuthRedirect\r\n//потом возьмет результат выполнения этой функции и перекинет в следующ.функцию (connect)\r\n//получается что вызываем connect,он возвращает HOC и потом в этот HOC закидываем нашу компоненту\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  // 3. и этот результат закинь сюда\r\n  withAuthRedirect // 2. закидывает его в эту функцию,потом получи результат\r\n)(Dialogs); //ход выполнения. 1. сompose берет Dialogs\r\n\r\n//==========================================================================================================\r\n//инфу o store вынесли в контейнерную компоненту\r\n//Весь смысл контейнерной компоненты просто быть оберткой и снабдить данными презентационную компоненту. ту Dialogs.jsx,\r\n// для обычной-функциональной компоненты в нашем случае Dialogs.jsx\r\n\r\n//           CONNECT помогает делать локальные перерисовки и внутри он сам делает subscribe\r\n//           давая нам возможеность не вызывать subscribe\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}